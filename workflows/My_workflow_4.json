{
  "name": "My workflow 4",
  "nodes": [
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-lite-preview",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1252,
        620
      ],
      "id": "e2a4314c-b3a0-4fb2-b4fd-221ad1ccb82c",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "5imOJ592r187vlMZ",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        284,
        620
      ],
      "id": "66aef64c-e314-41a2-afd9-e292d5cf6b58",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "5imOJ592r187vlMZ",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1280,
        400
      ],
      "id": "cc403d50-a378-4b86-a0c5-3c8a838711bc",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a helpful assistant that transforms SQL query results into clear, professional summaries for end users. Given the following input:\nobjects\n{{ Columns = $json[\"rows\"].last().keys()}}\n{{ Values = $json[\"rows\"].map((item)=> item.values()); \n  \n}}\n\nGenerate a well-structured summary with the following components: 1. ðŸ“‹ **Summary Explanation** Provide a concise explanation of what the returned data represents. \n\n2. ðŸ§  **Analytics** Provide analytics on the datato find patterns.\n\n3. ðŸ“Š **Formatted Results Table** Display the raw SQL results in a clean and readable Markdown table, ensuring: \n* Proper column headers \n* Neat alignment \n* No truncation or overflow \n* Added Padding and Extra Spacing between columns !IMPORTANT \n* Add spacing after data\n* Convert column headers to Title Case Ensure the entire response is well-formatted, user-friendly, and suitable for presentation or reporting purposes. The output is intended for markdown  ",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        196,
        400
      ],
      "id": "f5d0ab21-6a0a-4fc2-8af0-dc03d1406645",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "="
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1132,
        620
      ],
      "id": "81fdf49b-1659-4429-b8ab-04feb27c4697",
      "name": "Simple Memory",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      query: $input.first().json.body.message\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1940,
        500
      ],
      "id": "305e3c73-32ab-41a8-8223-51ff4fd0e19d",
      "name": "Convert to JSON"
    },
    {
      "parameters": {
        "jsCode": "const userQuery = $('Convert to JSON').first().json.query;\nconst metadata = $input.first().json.context;\n\nconst prompt = `\nYou are a helpful assistant. Your job is to translate natural language questions into SQL queries that can be executed on an Oracle database.\n\nUser request: ${userQuery}\n\nRelevant DB Metadata (tables, columns, FKs):\n${JSON.stringify(metadata, null, 2)}\n\nYour task is to output only a valid SQL query using Oracle syntax. \nDo not include any explanation, comments, or text outside the query.\n\nWhen generating queries:\n* Always respect foreign key relationships and join related tables when needed to retrieve meaningful or complete information.\n* If a column is a foreign key, consider joining with the referenced table to get descriptive fields (e.g., product name instead of product_id).\n* Use appropriate table aliases for readability if joining multiple tables.\n* Ensure the query reflects the intent of the user's question, even if it requires joining across multiple related tables.\n* Ensure not to include ID fields unless specifically asked for.\n\nAlways output only a raw SQL query. Do not include any markdown formatting, comments, or extra explanation â€” just the query.\n`;\n\nreturn [{ json: { prompt } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1500,
        500
      ],
      "id": "be18f7c9-dc05-4903-b0e3-3dd42e1fc0cd",
      "name": "Generate Custom Prompt"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst updatedItems = items.map((item) => {\n  let query = item?.json?.output;\n  if (!query) return item;\n\n  // Remove triple backticks and language tag\n  query = query\n    .replace(/^```[\\w]*\\r?\\n/i, \"\")\n    .replace(/\\r?\\n```$/, \"\");\n\n  // Convert escaped \\n to real newlines\n  query = query.replace(/\\\\n/g, \"\\n\").trim();\n\n  // Remove trailing semicolons\n  query = query.replace(/;+\\s*$/, \"\").trim();\n\n  // Ensure query starts with SELECT\n  if (!/^SELECT\\s/i.test(query)) {\n    throw new Error(`Invalid query format: must start with SELECT`);\n  }\n\n  // Case-insensitive matching: transform \"col = 'value'\" into \"UPPER(col) = UPPER('value')\"\n  query = query.replace(\n    /(\\bWHERE\\b[\\s\\S]*?)(\\b\\w+\\b)\\s*=\\s*'([^']+)'/i,\n    (match, wherePart, column, value) => {\n      return `${wherePart}UPPER(${column}) = UPPER('${value}')`;\n    }\n  );\n\n  // Normalize spaces\n  item.json.output = query.replace(/\\s+/g, \" \").trim();\n\n  return item;\n});\n\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -904,
        500
      ],
      "id": "f84d3203-9e74-46f5-a1c1-da68c6f0440d",
      "name": "Clean Up SQL"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/similar-metadata",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.query }}"
            }
          ]
        },
        "options": {
          "timeout": 80000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1720,
        500
      ],
      "id": "a4019d07-acbd-4540-9316-b8e435e78744",
      "name": "Get Table Metadata"
    },
    {
      "parameters": {
        "url": "http://127.0.0.1:8000/db-direct?",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{$json.output}}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $('Webhook').item.json.body.headers.Authorization }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -684,
        500
      ],
      "id": "1d957c25-2480-4423-b61f-9ac9d195a85f",
      "name": "Get Output from Oracle"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\n\n\n// Flatten each row to a readable format\n// const rows = temp.map((item, index) => {\n//   const row = item;\n//   const readable = Object.entries(row)\n//     .map(([key, value]) => `**${key}**: ${value}`)\n//     .join(', ');\n//   return `Row ${index + 1}: ${readable}`;\n// });\n\nreturn [\n  {\n    json: {\n      success: items[0].json.success,\n      rows: items[0].json.results\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -464,
        500
      ],
      "id": "fbbf7f4c-fca2-4087-aa97-db23b12f4f7e",
      "name": "Get Outputs"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "7e1204dc-a1b6-4c29-acfa-c64fb2a5c01b",
              "leftValue": "={{ $json.success }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -244,
        500
      ],
      "id": "dc151252-7edc-48be-8c33-05c86c420733",
      "name": "Success Test"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "9f40634d-dafb-4ac7-9af3-d15c45d21897",
              "leftValue": "={{ $json.rows.error }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -24,
        500
      ],
      "id": "299a828e-b86b-4882-8a0c-af21ee51b065",
      "name": "If"
    },
    {
      "parameters": {
        "content": "## User Query Workflow\n**User types message -> get metadata -> generate custom prompt with metadata -> generate sql -> get results",
        "width": 320,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2360,
        460
      ],
      "typeVersion": 1,
      "id": "286937f6-1a21-4909-a98c-58514e919185",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "content-type",
                "value": "text"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        572,
        500
      ],
      "id": "9a1700e6-63a9-4002-a3f5-62bc175d34a5",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1940,
        960
      ],
      "id": "ac9bd931-c36a-4422-871b-12eb96e85d79",
      "name": "When chat message received",
      "webhookId": "2c091acb-0e62-47e2-8c30-c6eb4998f481"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-lite-preview",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1032,
        1180
      ],
      "id": "58cc7354-f5ef-41d7-b393-8070dd2c94c1",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "5imOJ592r187vlMZ",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        504,
        1180
      ],
      "id": "1bcb543f-dc78-4d89-b56c-1c54eec74b2e",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "5imOJ592r187vlMZ",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1060,
        960
      ],
      "id": "bd166ee0-c7f4-49b2-93f3-d21304f93a84",
      "name": "AI Agent3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a helpful assistant that transforms SQL query results into clear, professional summaries for end users. Given the following input:\nobjects\n{{ Columns = $json[\"rows\"].last().keys()}}\n{{ Values = $json[\"rows\"].map((item)=> item.values()); \n  \n}}\n\nGenerate a well-structured summary with the following components: 1. ðŸ“‹ **Summary Explanation** Provide a concise explanation of what the returned data represents. \n\n2. ðŸ§  **Analytics** Provide analytics on the datato find patterns.\n\n3. ðŸ“Š **Formatted Results Table** Display the raw SQL results in a clean and readable Markdown table, ensuring: \n* Proper column headers \n* Neat alignment \n* No truncation or overflow \n* Added Padding and Extra Spacing between columns !IMPORTANT \n* Add spacing after data\n* Convert column headers to Title Case Ensure the entire response is well-formatted, user-friendly, and suitable for presentation or reporting purposes. The output is intended for markdown",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        416,
        960
      ],
      "id": "ae71f52f-ea07-43e4-9a18-93b10947dd39",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "90a9f433-8819-4b1c-97b8-2be0212515c4",
              "leftValue": "={{ $json.success }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1500,
        -120
      ],
      "id": "30e7256c-acf1-40d6-b21d-90364f36858d",
      "name": "If3"
    },
    {
      "parameters": {
        "url": "http://127.0.0.1:8000/refresh-metadata",
        "options": {
          "timeout": 80000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1940,
        -120
      ],
      "id": "2a947f9b-c4af-4bf9-b398-4b4e3fe4e95d",
      "name": "Refresh DB Metadata1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/embed-metadata",
        "options": {
          "timeout": 800000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1720,
        -120
      ],
      "id": "081d742b-ca47-49bf-8a3d-d2d0eaa7cfec",
      "name": "Run Embedding Pipeline1"
    },
    {
      "parameters": {
        "method": "=POST",
        "url": "http://127.0.0.1:8000/similar-metadata",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"query\": \"Orders\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1280,
        -120
      ],
      "id": "419634d4-657a-4e23-9cbc-e8f60e9bce91",
      "name": "Test Similar Metadata1"
    },
    {
      "parameters": {
        "content": "## Metadata Ingestion Workflow:\nAdds Embeddings for Metadata and Tests with one table name.\nTo Be Run: Periodically or On Change in Tables.",
        "height": 120,
        "width": 380,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -240,
        -120
      ],
      "typeVersion": 1,
      "id": "cdc659f8-2b00-45ba-9e41-dd90b8de6040",
      "name": "Metadata Ingestion1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -912,
        1180
      ],
      "id": "169e6d2a-33d7-4297-9396-8987b080e745",
      "name": "Simple Memory1"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      query: $input.first().json.chatInput\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1720,
        960
      ],
      "id": "0157f537-397f-4579-b064-f5d2292f3307",
      "name": "Convert to JSON1"
    },
    {
      "parameters": {
        "jsCode": "const userQuery = $('Convert to JSON1').first().json.query;\nconst metadata = $input.first().json.context;\n\nconst prompt = `\nYou are a helpful assistant. Your job is to translate natural language questions into SQL queries that can be executed on an Oracle database.\n\nUser request: ${userQuery}\n\nRelevant DB Metadata (tables, columns, FKs):\n${JSON.stringify(metadata, null, 2)}\n\nYour task is to output only a valid SQL query using Oracle syntax. \nDo not include any explanation, comments, or text outside the query.\n\nWhen generating queries:\n* Always respect foreign key relationships and join related tables when needed to retrieve meaningful or complete information.\n* If a column is a foreign key, consider joining with the referenced table to get descriptive fields (e.g., product name instead of product_id).\n* Use appropriate table aliases for readability if joining multiple tables.\n* Ensure the query reflects the intent of the user's question, even if it requires joining across multiple related tables.\n* Ensure not to include ID fields unless specifically asked for.\n\nAlways output only a raw SQL query. Do not include any markdown formatting, comments, or extra explanation â€” just the query.\n`;\n\nreturn [{ json: { prompt } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1280,
        960
      ],
      "id": "6aa35ea6-5c79-4e87-8cc9-34a65bc7fba7",
      "name": "Generate Custom Prompt1"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst updatedItems = items.map((item) => {\n  let query = item?.json?.output;\n\n  if (!query) return item;\n\n  // Clean up the query first\n  query = query.replace(/^```sql\\\\n|^```sql\\n|^```sql\\r\\n/, \"\")\n               .replace(/\\\\n```$|\\n```$|\\r\\n```$/, \"\")\n               .replace(/\\\\n/g, \"\\n\")\n               .replace(/;\\s*$/, \"\")\n               .trim();\n\n  // Convert to uppercase to check if it's a SELECT query\n  const upperQuery = query.toUpperCase();\n  \n  if (upperQuery.startsWith(\"SELECT\")) {\n    // Handle case sensitivity for table and column names\n    query = query.replace(/\\b(FROM|JOIN)\\s+(\\w+)/gi, (match, keyword, tableName) => {\n      return `${keyword} \"${tableName.toUpperCase()}\"`;\n    });\n\n    // Handle column names in SELECT clause\n    query = query.replace(/\\bSELECT\\s+(.*?)\\bFROM/gi, (match, columnsPart) => {\n      const processedColumns = columnsPart.split(',').map(col => {\n        const trimmedCol = col.trim();\n        if (trimmedCol && !trimmedCol.includes('(') && !trimmedCol.includes('*')) {\n          return `\"${trimmedCol.toUpperCase()}\"`;\n        }\n        return trimmedCol;\n      }).join(', ');\n      \n      return `SELECT ${processedColumns} FROM`;\n    });\n\n    // Handle WHERE clause with string comparisons - make them case-insensitive\n    if (query.includes(\"WHERE\")) {\n      query = query.replace(/\\bWHERE\\s+(.*)/gi, (match, whereClause) => {\n        // Handle = comparisons with strings\n        let processedWhere = whereClause.replace(/(\\w+)\\s*=\\s*'([^']*)'/gi, (conditionMatch, column, value) => {\n          if (isNaN(value) && value !== 'NULL' && value !== 'null') {\n            return `UPPER(\"${column.toUpperCase()}\") = UPPER('${value}')`;\n          }\n          return conditionMatch;\n        });\n\n        // Handle LIKE comparisons\n        processedWhere = processedWhere.replace(/(\\w+)\\s+LIKE\\s+'([^']*)'/gi, (conditionMatch, column, value) => {\n          return `UPPER(\"${column.toUpperCase()}\") LIKE UPPER('${value}')`;\n        });\n\n        return `WHERE ${processedWhere}`;\n      });\n    }\n  }\n\n  // Clean up spacing\n  query = query.replace(/\\s+/g, \" \").trim();\n  \n  item.json.output = query;\n  return item;\n});\n\nreturn updatedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -684,
        960
      ],
      "id": "f32e5284-e110-4103-b46b-9cee2e307586",
      "name": "Clean Up SQL1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/similar-metadata",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.query }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1500,
        960
      ],
      "id": "275e8388-116d-4c06-9c1c-6e8ddc190318",
      "name": "Get Table Metadata1"
    },
    {
      "parameters": {
        "url": "http://127.0.0.1:8000/db-direct?",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{$json.output}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -460,
        960
      ],
      "id": "91ece251-b805-43f9-8a7a-4af39ff0ffae",
      "name": "Get Output from Oracle1"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\n\n\n// Flatten each row to a readable format\n// const rows = temp.map((item, index) => {\n//   const row = item;\n//   const readable = Object.entries(row)\n//     .map(([key, value]) => `**${key}**: ${value}`)\n//     .join(', ');\n//   return `Row ${index + 1}: ${readable}`;\n// });\n\nreturn [\n  {\n    json: {\n      success: items[0].json.success,\n      rows: items[0].json.results\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -244,
        960
      ],
      "id": "5e8ab2c9-acf8-49b8-b391-96fc0f2821ed",
      "name": "Get Outputs1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "7e1204dc-a1b6-4c29-acfa-c64fb2a5c01b",
              "leftValue": "={{ $json.success }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -24,
        960
      ],
      "id": "8e0c2567-e689-4b56-9e2c-161f08987d9c",
      "name": "Success Test1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "9f40634d-dafb-4ac7-9af3-d15c45d21897",
              "leftValue": "={{ $json.rows.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        196,
        960
      ],
      "id": "068415d3-2694-46ca-9c96-643b97014047",
      "name": "If1"
    },
    {
      "parameters": {
        "content": "## Test Query Workflow\nSee Responses and accuracy using n8n chat only. ",
        "height": 220,
        "width": 220
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        960,
        1220
      ],
      "typeVersion": 1,
      "id": "a0da05f6-15b8-4741-a091-e4d99b237ade",
      "name": "Sticky Note3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2320,
        -120
      ],
      "id": "ddd9f74c-01db-4a09-b211-9cf1d67a887c",
      "name": "When clicking â€˜Execute workflowâ€™"
    }
  ],
  "pinData": {},
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Clean Up SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Convert to JSON": {
      "main": [
        [
          {
            "node": "Get Table Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Custom Prompt": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Up SQL": {
      "main": [
        [
          {
            "node": "Get Output from Oracle",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Table Metadata": {
      "main": [
        [
          {
            "node": "Generate Custom Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Output from Oracle": {
      "main": [
        [
          {
            "node": "Get Outputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Outputs": {
      "main": [
        [
          {
            "node": "Success Test",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Test": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Convert to JSON1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent3": {
      "main": [
        [
          {
            "node": "Clean Up SQL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Test Similar Metadata1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Refresh DB Metadata1": {
      "main": [
        [
          {
            "node": "Run Embedding Pipeline1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run Embedding Pipeline1": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Convert to JSON1": {
      "main": [
        [
          {
            "node": "Get Table Metadata1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Custom Prompt1": {
      "main": [
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Up SQL1": {
      "main": [
        [
          {
            "node": "Get Output from Oracle1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Table Metadata1": {
      "main": [
        [
          {
            "node": "Generate Custom Prompt1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Output from Oracle1": {
      "main": [
        [
          {
            "node": "Get Outputs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Outputs1": {
      "main": [
        [
          {
            "node": "Success Test1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Test1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking â€˜Execute workflowâ€™": {
      "main": [
        [
          {
            "node": "Refresh DB Metadata1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1c928fcc-be17-4e7a-96bb-fd219a0d05c7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "680967e16569d4b150e28893acf266a94711c8ea1fe2f3b7da06ad57f0a6a73b"
  },
  "id": "viQRwoeqMT7NZy3U",
  "tags": []
}