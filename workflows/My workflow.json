{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1888,
        224
      ],
      "id": "8db5dad5-e525-4c95-84a8-f5e74d6bfeb9",
      "name": "When chat message received",
      "webhookId": "2c091acb-0e62-47e2-8c30-c6eb4998f481"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-lite-preview",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -960,
        672
      ],
      "id": "87885ae0-230e-419a-9847-d422217e698a",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "gDYydjis5pHhIbiV",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        560,
        752
      ],
      "id": "227abb6f-7fa0-4c6f-b21f-b278a8e25682",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "gDYydjis5pHhIbiV",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -960,
        464
      ],
      "id": "5af0eb4c-43e4-454b-ac3c-75e319b97524",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a helpful assistant that transforms SQL query results into clear, professional summaries for end users. Given the following input:\nobjects\n{{ Columns = $json[\"rows\"].last().keys()}}\n{{ Values = $json[\"rows\"].map((item)=> item.values()); \n  \n}}\n\nGenerate a well-structured summary with the following components: 1. ðŸ“‹ **Summary Explanation** Provide a concise explanation of what the returned data represents. \n\n2. ðŸ§  **Analytics** Provide analytics on the datato find patterns.\n\n3. ðŸ“Š **Formatted Results Table** Display the raw SQL results in a clean and readable Markdown table, ensuring: \n* Proper column headers \n* Neat alignment \n* No truncation or overflow \n* Added Padding and Extra Spacing between columns !IMPORTANT \n* Add spacing after data\n* Convert column headers to Title Case Ensure the entire response is well-formatted, user-friendly, and suitable for presentation or reporting purposes. The output is intended for markdown  ",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        560,
        464
      ],
      "id": "53fe1a3b-7d95-496d-9982-95d8aa7b60ba",
      "name": "AI Agent"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1296,
        16
      ],
      "id": "0c1497c8-5a1a-4058-8005-bf39d24d38b4",
      "name": "When clicking â€˜Execute workflowâ€™"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "90a9f433-8819-4b1c-97b8-2be0212515c4",
              "leftValue": "={{ $json.success }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -576,
        16
      ],
      "id": "9da5e78b-30b2-4c7c-b6d3-e7a8c315c6d5",
      "name": "If2"
    },
    {
      "parameters": {
        "url": "http://127.0.0.1:8000/refresh-metadata",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1024,
        16
      ],
      "id": "75ca3db7-ee78-433f-80c1-c7d2dc1c3a1a",
      "name": "Refresh DB Metadata"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/embed-metadata?owner=TIF",
        "options": {
          "timeout": 800000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -800,
        16
      ],
      "id": "80e90edb-6bf7-46bf-99c9-ff2cea78ffd0",
      "name": "Run Embedding Pipeline"
    },
    {
      "parameters": {
        "method": "=POST",
        "url": "http://127.0.0.1:8000/similar-metadata",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"query\": \"Menu\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -352,
        16
      ],
      "id": "86db0ab1-5e8d-450a-bbbf-b8cf93e73427",
      "name": "Test Similar Metadata"
    },
    {
      "parameters": {
        "content": "## Metadata Ingestion Workflow:\nAdds Embeddings for Metadata and Tests with one table name.\nTo Be Run: Periodically or On Change in Tables.",
        "height": 120,
        "width": 380,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1,
      "id": "8302ace0-a2c6-426d-8071-46b4af5c915c",
      "name": "Metadata Ingestion"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "="
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -832,
        672
      ],
      "id": "d8663972-0428-4972-a535-ccaf62a1835d",
      "name": "Simple Memory",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      query: $input.first().json.body.message\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1632,
        464
      ],
      "id": "99034be1-8f5e-49c4-88a0-d8c12951b9e9",
      "name": "Convert to JSON"
    },
    {
      "parameters": {
        "jsCode": "const userQuery = $('Convert to JSON').first().json.query;\nconst metadata = $input.first().json.context;\n\nconst prompt = `\nYou are a helpful assistant. Your job is to translate natural language questions into SQL queries that can be executed on an Oracle database.\n\nUser request: ${userQuery}\n\nRelevant DB Metadata (tables, columns, FKs):\n${JSON.stringify(metadata, null, 2)}\n\nYour task is to output only a valid SQL query using Oracle syntax. \nDo not include any explanation, comments, or text outside the query.\n\nWhen generating queries:\n* Always respect foreign key relationships and join related tables when needed to retrieve meaningful or complete information.\n* If a column is a foreign key, consider joining with the referenced table to get descriptive fields (e.g., product name instead of product_id).\n* Use appropriate table aliases for readability if joining multiple tables.\n* Ensure the query reflects the intent of the user's question, even if it requires joining across multiple related tables.\n* Ensure not to include ID fields unless specifically asked for.\n\nAlways output only a raw SQL query. Do not include any markdown formatting, comments, or extra explanation â€” just the query.\n`;\n\nreturn [{ json: { prompt } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1184,
        464
      ],
      "id": "d6935fad-0475-495c-8a93-80b00b478e55",
      "name": "Generate Custom Prompt"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst updatedItems = items.map((item) => {\n  let query = item?.json?.output;\n  if (!query) return item;\n\n  // Remove triple backticks and language tag\n  query = query\n    .replace(/^```[\\w]*\\r?\\n/i, \"\")\n    .replace(/\\r?\\n```$/, \"\");\n\n  // Convert escaped \\n to real newlines\n  query = query.replace(/\\\\n/g, \"\\n\").trim();\n\n  // Remove trailing semicolons\n  query = query.replace(/;+\\s*$/, \"\").trim();\n\n  // Ensure query starts with SELECT\n  if (!/^SELECT\\s/i.test(query)) {\n    throw new Error(`Invalid query format: must start with SELECT`);\n  }\n\n  // Case-insensitive matching: transform \"col = 'value'\" into \"UPPER(col) = UPPER('value')\"\n  query = query.replace(\n    /(\\bWHERE\\b[\\s\\S]*?)(\\b\\w+\\b)\\s*=\\s*'([^']+)'/i,\n    (match, wherePart, column, value) => {\n      return `${wherePart}UPPER(${column}) = UPPER('${value}')`;\n    }\n  );\n\n  // Normalize spaces\n  item.json.output = query.replace(/\\s+/g, \" \").trim();\n\n  return item;\n});\n\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -560,
        464
      ],
      "id": "7c559d9f-ca1e-4815-a7d5-3d7e8c2595e9",
      "name": "Clean Up SQL"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8000/similar-metadata",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.query }}"
            }
          ]
        },
        "options": {
          "timeout": 80000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1408,
        464
      ],
      "id": "33a4a9de-1698-4160-b00e-6f0036c7877e",
      "name": "Get Table Metadata"
    },
    {
      "parameters": {
        "url": "http://127.0.0.1:8000/db-direct?",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{$json.output}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -336,
        464
      ],
      "id": "409678eb-aa85-409a-b230-9d05dbe793f8",
      "name": "Get Output from Oracle"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\n\n\n// Flatten each row to a readable format\n// const rows = temp.map((item, index) => {\n//   const row = item;\n//   const readable = Object.entries(row)\n//     .map(([key, value]) => `**${key}**: ${value}`)\n//     .join(', ');\n//   return `Row ${index + 1}: ${readable}`;\n// });\n\nreturn [\n  {\n    json: {\n      success: items[0].json.success,\n      rows: items[0].json.results\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -112,
        464
      ],
      "id": "41f26c01-9077-462f-9c6f-c5be123dd596",
      "name": "Get Outputs"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "7e1204dc-a1b6-4c29-acfa-c64fb2a5c01b",
              "leftValue": "={{ $json.success }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        112,
        464
      ],
      "id": "aa4c51a7-3f50-4305-babd-5fd1f92bc344",
      "name": "Success Test"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "9f40634d-dafb-4ac7-9af3-d15c45d21897",
              "leftValue": "={{ $json.rows.error }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        336,
        464
      ],
      "id": "c7ac00a7-8fb7-4608-a7b7-bf1f0e5a77bd",
      "name": "If"
    },
    {
      "parameters": {
        "content": "## User Query Workflow\n**User types message -> get metadata -> generate custom prompt with metadata -> generate sql -> get results",
        "width": 320,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2352,
        448
      ],
      "typeVersion": 1,
      "id": "6c7d83c1-46f1-47ef-9bba-3c8d48c35426",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Improvements \n1. Accuracy of similar-metadata function \n2. Prompts for final output agent"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1072,
        912
      ],
      "typeVersion": 1,
      "id": "2f92411e-10d4-4205-b317-96995447f63d",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "03e650c2-18be-4c37-903a-4e99bddcc8b1",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1888,
        464
      ],
      "id": "2e57747e-49d7-4987-8a1b-93df02105571",
      "name": "Webhook",
      "webhookId": "03e650c2-18be-4c37-903a-4e99bddcc8b1",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "content-type",
                "value": "text"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        912,
        464
      ],
      "id": "330219b3-ed2b-4c08-bf27-3ae1a9cbad4c",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        []
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Clean Up SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking â€˜Execute workflowâ€™": {
      "main": [
        [
          {
            "node": "Refresh DB Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Test Similar Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Refresh DB Metadata": {
      "main": [
        [
          {
            "node": "Run Embedding Pipeline",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run Embedding Pipeline": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Convert to JSON": {
      "main": [
        [
          {
            "node": "Get Table Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Custom Prompt": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Up SQL": {
      "main": [
        [
          {
            "node": "Get Output from Oracle",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Table Metadata": {
      "main": [
        [
          {
            "node": "Generate Custom Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Output from Oracle": {
      "main": [
        [
          {
            "node": "Get Outputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Outputs": {
      "main": [
        [
          {
            "node": "Success Test",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Test": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Convert to JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2a934b84-35bd-4bac-a4b2-55a8cb073cc1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6c4b1ee90f389750aba71e3df7961f56906ac00d0bfd0ab72dae8c10b8786880"
  },
  "id": "t2yfx7eNvpFzg7as",
  "tags": []
}